import subprocess
import sys
import pkg_resources
import os
import platform

# Lista de bibliotecas Python necess√°rias
REQUIRED_PACKAGES = [
    "yt_dlp",
    "requests",
    "pyppeteer",
]

# Depend√™ncias do sistema para pyppeteer (Ubuntu/GitHub Actions)
SYSTEM_DEPENDENCIES = [
    "libnss3",
    "libatk1.0-0",
    "libatk-bridge2.0-0",
    "libcups2",
    "libgbm1",
    "libasound2",
]

def run_command(command, shell=False):
    """Executa um comando no terminal e retorna a sa√≠da ou erro."""
    try:
        process = subprocess.run(
            command,
            shell=shell,
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        print(f"‚úÖ Sucesso: {' '.join(command if not shell else [command])}")
        return process.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar {' '.join(command if not shell else [command])}: {e.stderr}")
        sys.exit(1)

def check_and_install_system_deps():
    """Verifica e instala depend√™ncias do sistema (apenas em Linux)."""
    if platform.system() != "Linux":
        print("‚ÑπÔ∏è N√£o √© Linux. Pulando instala√ß√£o de depend√™ncias do sistema.")
        return

    print("üîß Verificando e instalando depend√™ncias do sistema...")
    # Verifica se 'apt-get' est√° dispon√≠vel (Ubuntu/GitHub Actions)
    try:
        run_command(["apt-get", "--version"])
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è 'apt-get' n√£o encontrado. Pulando depend√™ncias do sistema (pode ser necess√°rio instalar manualmente).")
        return

    # Atualiza o √≠ndice de pacotes
    run_command(["sudo", "apt-get", "update", "-y"])
    
    # Instala depend√™ncias do sistema
    run_command(["sudo", "apt-get", "install", "-y"] + SYSTEM_DEPENDENCIES)

def check_and_install_python_deps():
    """Verifica e instala bibliotecas Python necess√°rias."""
    print("üîß Verificando e instalando bibliotecas Python...")
    
    # Atualiza o pip
    run_command([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
    
    # Verifica quais pacotes j√° est√£o instalados
    installed = {pkg.key for pkg in pkg_resources.working_set}
    missing = [pkg for pkg in REQUIRED_PACKAGES if pkg.replace("_", "-") not in installed]
    
    if missing:
        print(f"‚ÑπÔ∏è Instalando pacotes ausentes: {missing}")
        run_command([sys.executable, "-m", "pip", "install"] + missing)
    else:
        print("‚úÖ Todas as bibliotecas Python j√° est√£o instaladas.")
    
    # Instala o Chromium para pyppeteer
    print("üîß Baixando Chromium para pyppeteer...")
    run_command([sys.executable, "-m", "pyppeteer.install"])

def verify_installation():
    """Verifica se todas as bibliotecas est√£o instaladas."""
    print("üîç Verificando instala√ß√£o...")
    installed = {pkg.key for pkg in pkg_resources.working_set}
    for pkg in REQUIRED_PACKAGES:
        if pkg.replace("_", "-") not in installed:
            print(f"‚ùå Erro: {pkg} n√£o est√° instalado!")
            sys.exit(1)
        else:
            print(f"‚úÖ {pkg} instalado.")

def run_push_py():
    """Executa o script push.py."""
    if not os.path.exists("push.py"):
        print("‚ùå Erro: push.py n√£o encontrado no diret√≥rio atual!")
        sys.exit(1)
    
    print("üöÄ Executando push.py...")
    run_command([sys.executable, "push.py"], shell=False)

def main():
    print("üöÄ Iniciando configura√ß√£o e execu√ß√£o...")
    
    # Instala depend√™ncias do sistema (se Linux)
    check_and_install_system_deps()
    
    # Instala bibliotecas Python
    check_and_install_python_deps()
    
    # Verifica a instala√ß√£o
    verify_installation()
    
    # Executa push.py
    run_push_py()
    
    print("üèÅ Processo conclu√≠do com sucesso!")

if __name__ == "__main__":
    main()