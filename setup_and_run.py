import subprocess
import sys
import os
import importlib.metadata

# Lista de bibliotecas Python necess√°rias para o script principal (compat√≠veis com Python 3.11)
# Inclui m√≥dulos padr√£o e externos
REQUIRED_PACKAGES = [
    "yt-dlp>=2025.02.19",  # Pacote externo para streams do YouTube, vers√£o mais recente at√© mar√ßo de 2025
    "subprocess",          # Padr√£o: execu√ß√£o de comandos (placeholder, n√£o instal√°vel via pip)
    "re",                  # Padr√£o: express√µes regulares
    "time",                # Padr√£o: manipula√ß√£o de tempo
    "os",                  # Padr√£o: opera√ß√µes de sistema operacional
    "json",                # Padr√£o: manipula√ß√£o de JSON
    "shutil",              # Padr√£o: opera√ß√µes de arquivo de alto n√≠vel
    "typing",              # Padr√£o: anota√ß√µes de tipo
    "concurrent.futures",  # Padr√£o: execu√ß√£o paralela
    "importlib.metadata",  # Padr√£o: metadados de pacotes
]

# Verifica se estamos usando Python 3.11
EXPECTED_PYTHON_VERSION = (3, 11)

def run_command(command, shell=False, sudo=False):
    """Executa comandos com ou sem sudo e tratamento de erro."""
    if sudo and not os.getenv("TERMUX_VERSION"):
        command = ["sudo"] + command
    try:
        process = subprocess.run(
            command,
            shell=shell,
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        print(f"‚úÖ Sucesso: {' '.join(command)}")
        return process.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar '{' '.join(command)}': {e.stderr}")
        sys.exit(1)

def check_python_version():
    """Verifica se a vers√£o do Python √© 3.11."""
    current_version = sys.version_info[:2]
    if current_version != EXPECTED_PYTHON_VERSION:
        print(f"‚ùå Erro: Este script requer Python {EXPECTED_PYTHON_VERSION[0]}.{EXPECTED_PYTHON_VERSION[1]}, mas voc√™ est√° usando {current_version[0]}.{current_version[1]}")
        sys.exit(1)
    print(f"‚úÖ Python {current_version[0]}.{current_version[1]} detectado!")

def install_python_deps():
    """Instala/atualiza pacotes Python necess√°rios."""
    print("üîß Atualizando pip para Python 3.11...")
    run_command([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
    
    print("üîß Verificando e instalando/atualizando pacotes Python...")
    installed = {pkg.metadata["Name"].lower() for pkg in importlib.metadata.distributions()}
    # Separa pacotes padr√£o (n√£o instal√°veis) de pacotes externos
    external_packages = [pkg for pkg in REQUIRED_PACKAGES if not pkg.replace(".", "-") in ["subprocess", "re", "time", "os", "json", "shutil", "typing", "concurrent-futures", "importlib-metadata"]]
    missing_or_updatable = [pkg for pkg in external_packages if pkg.split(">")[0].lower() not in installed]
    
    if missing_or_updatable:
        print(f"‚ÑπÔ∏è Instalando/atualizando pacotes externos ausentes: {missing_or_updatable}")
        run_command([sys.executable, "-m", "pip", "install"] + missing_or_updatable)
    else:
        print("‚úÖ Todos os pacotes externos j√° est√£o instalados!")

    # Verifica m√≥dulos padr√£o (n√£o instal√°veis via pip, apenas confirma presen√ßa)
    standard_modules = [pkg.replace(".", "-") for pkg in REQUIRED_PACKAGES if pkg.replace(".", "-") in ["subprocess", "re", "time", "os", "json", "shutil", "typing", "concurrent-futures", "importlib-metadata"]]
    for mod in standard_modules:
        try:
            __import__(mod.replace("-", "."))
            print(f"‚úÖ M√≥dulo padr√£o {mod} presente!")
        except ImportError:
            print(f"‚ùå Erro: M√≥dulo padr√£o {mod} n√£o encontrado no Python 3.11!")
            sys.exit(1)

def install_system_deps():
    """Instala depend√™ncias do sistema (ffmpeg)."""
    print("üîß Verificando e instalando depend√™ncias do sistema...")
    try:
        subprocess.run(["ffmpeg", "-version"], capture_output=True, text=True, check=True)
        print("‚úÖ FFmpeg j√° instalado!")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ÑπÔ∏è Instalando FFmpeg...")
        if os.name == "posix" and not os.getenv("TERMUX_VERSION"):
            run_command(["apt", "update"], sudo=True)
            run_command(["apt", "install", "-y", "ffmpeg"], sudo=True)
        elif os.getenv("TERMUX_VERSION"):
            run_command(["pkg", "install", "-y", "ffmpeg"])
        else:
            print("‚ùå Sistema n√£o suportado para instala√ß√£o autom√°tica de FFmpeg. Instale manualmente!")
            sys.exit(1)

def verify_installation():
    """Verifica se todas as bibliotecas e depend√™ncias est√£o instaladas."""
    print("üîç Verifica√ß√£o final...")
    installed = {pkg.metadata["Name"].lower() for pkg in importlib.metadata.distributions()}
    external_packages = [pkg for pkg in REQUIRED_PACKAGES if not pkg.replace(".", "-") in ["subprocess", "re", "time", "os", "json", "shutil", "typing", "concurrent-futures", "importlib-metadata"]]
    for pkg in external_packages:
        pkg_name = pkg.split(">")[0].lower()
        if pkg_name not in installed:
            print(f"‚ùå Erro: {pkg_name} n√£o instalado!")
            sys.exit(1)
        print(f"‚úÖ {pkg_name} instalado com sucesso!")

    # Verifica m√≥dulos padr√£o
    standard_modules = [pkg.replace(".", "-") for pkg in REQUIRED_PACKAGES if pkg.replace(".", "-") in ["subprocess", "re", "time", "os", "json", "shutil", "typing", "concurrent-futures", "importlib-metadata"]]
    for mod in standard_modules:
        try:
            __import__(mod.replace("-", "."))
            print(f"‚úÖ M√≥dulo padr√£o {mod} confirmado!")
        except ImportError:
            print(f"‚ùå Erro: M√≥dulo padr√£o {mod} n√£o encontrado!")
            sys.exit(1)

    # Verifica FFmpeg
    try:
        result = subprocess.run(["ffmpeg", "-version"], capture_output=True, text=True, check=True)
        print(f"‚úÖ FFmpeg instalado: {result.stdout.splitlines()[0]}")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Erro: FFmpeg n√£o encontrado!")
        sys.exit(1)

def run_push_py():
    """Executa push.py com Python 3.11."""
    push_script = "push.py"
    if not os.path.exists(push_script):
        print(f"‚ùå Erro: {push_script} n√£o encontrado no diret√≥rio atual!")
        sys.exit(1)
    print(f"üöÄ Executando {push_script} com Python 3.11...")
    run_command([sys.executable, push_script])

def main():
    print("üöÄ Iniciando configura√ß√£o autom√°tica para o script principal...")
    check_python_version()
    install_python_deps()
    install_system_deps()
    verify_installation()
    run_push_py()
    print("üèÅ Configura√ß√£o e execu√ß√£o conclu√≠das com sucesso! Todos os m√≥dulos necess√°rios est√£o prontos.")

if __name__ == "__main__":
    main()